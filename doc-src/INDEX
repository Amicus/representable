# ROXML: Ruby Object to XML Mapping Library

<div class="quickLinks">
	<a href="#download">Download</a>
	<a href="#quickstart">Quick Start Guide</a>
</div>

ROXML is a [Ruby][1] library that is used to describe how ruby classes should
be represented as XML. This makes it possible to populate an object graph from XML
and to serialize an object graph to XML.

Classes defines their XML bindings using annotation-style class-level methods. At this point 
ROXML depends on the excellent XML processor [REXML][2] to handle XML parsing and generation.

    [1]:    http://ruby-lang.org/
            "Main Ruby Website"
    [2]:    http://www.germane-software.com/software/rexml/

## Status

ROXML is heading towards a 1.0 beta release, feature-lock state has been accomplished.
ROXML is highly usable in it's current pre-release state.

The following release tasks remaining to be completed:

*   Improve documentation.
*	Complete unit tests.

Planned features for next release include:

*   Better semantics for describing XML bindings.
*   Define life-cycle callback methods that the target class can implement
    to be notified during parsing/xml-generation.
*   Provide a pluggable API for XML-parsing/generation. Allow other XML-parsers
    than REXML to be used.
*   Verify performance.

The main project page is located at [RubyForge][3] where feedback (patches and bug-reports) 
can be posted.

<a name="download"></a>
## Download

You can download source versions from [RubyForge][3] project site or checkout
the files from [CVS](http://rubyforge.org/scm/?group_id=305).

ROXML depends on REXML (tested against version 3.1.2). ROXML also have build-dependencies on [BlueCloth][4]
and [Rake][5], but these libraries are included in CVS.

    [3]:    http://rubyforge.org/projects/roxml
    [4]:    http://bluecloth.rubyforge.org/
            "Ruby implementation of Markdown"
    [5]:    http://rubyforge.org/projects/rake/
            "Make-like utility for Ruby"

<a name="quickstart"></a>
## Quick Start Guide

This section includes examples for getting started with ROXML. See test cases and API
documentation for details.

Consider a <em>Library</em> containing a number of books. To describe that library and
its books the following classes are defined:

    class Book
        include ROXML

        xml_attribute :isbn, "ISBN"
        xml_text :title
        xml_text :description, nil, ROXML::TAG_CDATA
        xml_text :author

        def initialize
            yield self if block_given?
        end
    end

    class Library
        include ROXML

        xml_text :name, "NAME", ROXML::TAG_CDATA
        xml_object :books, Book, ROXML::TAG_ARRAY, "books"
    end

To create a library and put a number of books in it, we could run the following code:

    lib = Library.new
    lib.name = "My Funky Library"

    lib.books << Book.new do |book|
        book.isbn = "0201710897"
        book.title = "The PickAxe"
        book.description = "Probably the best ruby book out there"
        book.author = "David Thomas, Andrew Hunt, Dave Thomas"
    end

    lib.books << Book.new do |book|
        book.isbn = "9248710987"
        book.title = "The Wee Free Men"
        book.author = "Terry Pratchett"
        book.description = "Funny book about small, magic, swearing gnomes"
    end

To save this information to an XML file:

    File.open("library.xml", "w") do |f|
        lib.to_xml.write(f, 0)
    end

This would put the following XML into _library.xml_:

    <library>
      <NAME><![CDATA[My Funky Library]]></NAME>
      <books>
        <book ISBN='0201710897'>
          <title>The PickAxe</title>
          <description><![CDATA[Probably the best ruby book out there]]></description>
          <author>David Thomas, Andrew Hunt, Dave Thomas</author>
        </book>
        <book ISBN='9248710987'>
          <title>The Wee Free Men</title>
          <description><![CDATA[Funny book about small, magic, swearing gnomes]]></description>
          <author>Terry Pratchett</author>
        </book>
      </books>
    </library>

To later populate the library object from the XML file:

    lib = Library.parse(File.read("library.xml"))

To do a one-to-one mapping between XML objects, such as book and publisher,
you would use the *xml_object* annotation. For example:

	<book isbn="0974514055">
	  <title>Programming Ruby - 2nd Edition</title>
	  <description>Second edition of the great book</description>
	  <publisher>
	  	<name>Pragmatic Bookshelf</name>
	  </publisher>
	</book>

Can be mapped using the following code:

	class BookWithPublisher
  		include ROXML

	    xml_name :book
	    xml_object :publisher, Publisher
	end

Note: In the above example, *xml_name* annotation tells ROXML to set the element
name to "book" for mapping to XML. The default is XML element name is the class name in lowercase; "bookwithpublisher"
in this case.

<div id="footer"></div>

ROXML is available is licensed under the MIT License. See bundled MIT-LICENSE.txt for details.


ROXML was created by [Anders Engstrom](http://rubyforge.org/users/andersengstrom) and is being developed and maintained by [Zak Mandhro](http://rubyforge.org/users/zakmandhro).

For project tracking, downloads, and other information, visit the [ROXML RubyForge Project](http://rubyforge.org/projects/roxml) page.

<div id="cvs_id">$Id: INDEX,v 1.6 2006/06/28 03:52:38 zakmandhro Exp $</div>

