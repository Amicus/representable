# Introduction

ROXML is a [Ruby][1] library that is used to describe how ruby classes should
be represented as XML. This makes it possible to populate an object graph from XML
and to serialize an object graph to XML.

Classes defines their XML bindings using declarative "class-level" macros. At this point 
ROXML depends on the excellent XML processor [REXML][2] to handle XML parsing and generation.

    [1]:    http://ruby-lang.org/
            "Main Ruby Website"
    [2]:    http://www.germane-software.com/software/rexml/

# Status

ROXML is usable, but can not be considered stable software yet. Below is a list of 
some outstanding issues that should be dealt with before release 1.0.

*   Improve documentation.
*   Better semantics for describing XML bindings.
*   Define life-cycle callback methods that the target class can implement
    to be notified during parsing/xml-generation.
*   Provide a pluggable API for XML-parsing/generation. Allow other XML-parsers
    than REXML to be used.
*   Verify performance.

It should also be noted that I'm still pretty much a Ruby-Noobie, so any feedback
on the library (usability, code etc.) is much appreciated.

The main project page is located at [RubyForge][3] where feedback (patches and bug-reports) 
can be posted.

# Download

At this point no public release have been created. Until the first release is ready the
code can be downloaded through anonymous CVS (or as a tar.gz through WebCVS) at the [project page][3].

ROXML depends on REXML (tested against version 3.1.2). ROXML also have build-dependencies on [BlueCloth][4]
and [Rake][5], but these libraries are included in CVS.

    [3]:    http://rubyforge.org/projects/roxml
    [4]:    http://bluecloth.rubyforge.org/
            "Ruby implementation of Markdown"
    [5]:    http://rubyforge.org/projects/rake/
            "Make-like utility for Ruby"

# Usage

This is a short usage example. More detailed examples will be posted when the API stabilizes.

Consider a <em>Library</em> containing a number of books. To describe that library and
its books the following classes are defined:

    class Book
        include ROXML

        xml_attribute :isdn, "ISDN"
        xml_text :title
        xml_text :description, nil, ROXML::TAG_CDATA
        xml_text :author

        def initialize
            yield self if block_given?
        end
    end

    class Library
        include ROXML

        xml_text :name, "NAME", ROXML::TAG_CDATA
        xml_object :books, Book, ROXML::TAG_ARRAY, "books"
    end

To create a library and put a number of books in it we could run the following code:

    lib = Library.new
    lib.name = "My Funky Library"

    lib.books << Book.new do |book|
        book.isdn = "0201710897"
        book.title = "The PickAxe"
        book.description = "Probably the best ruby book out there"
        book.author = "David Thomas, Andrew Hunt, Dave Thomas"
    end

    lib.books << Book.new do |book|
        book.isdn = "9248710987"
        book.title = "The Wee Free Men"
        book.author = "Terry Pratchett"
        book.description = "Funny book about small, magic, swearing gnomes"
    end

To save this information to an XML file:

    File.open("library.xml", "w") do |f|
        lib.to_xml.write(f, 0)
    end

This would put the following XML into _library.xml_:

    <library>
      <NAME><![CDATA[My Funky Library]]></NAME>
      <books>
        <book ISDN='0201710897'>
          <title>The PickAxe</title>
          <description><![CDATA[Probably the best ruby book out there]]></description>
          <author>David Thomas, Andrew Hunt, Dave Thomas</author>
        </book>
        <book ISDN='9248710987'>
          <title>The Wee Free Men</title>
          <description><![CDATA[Funny book about small, magic, swearing gnomes]]></description>
          <author>Terry Pratchett</author>
        </book>
      </books>
    </library>

To later populate the library object from the XML file:

    lib = Library.parse(File.read("library.xml"))
    
<div id="cvs_id">$Id: INDEX,v 1.5 2004/07/27 08:14:45 andersengstrom Exp $</div>

